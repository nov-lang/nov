move Parser to its own file
add AST
it's fine to keep arena fucked up allocation fest until GC implementation

https://craftinginterpreters.com/local-variables.html#challenges
https://craftinginterpreters.com/global-variables.html#challenges
match, break, continue: https://craftinginterpreters.com/jumping-back-and-forth.html#challenges

grammar https://craftinginterpreters.com/appendix-i.html
https://ocaml.org/docs/values-and-functions#the-pipe-operator
https://ocaml.org/docs/basic-data-types#options--results

add opt to output bytecode and to run bytecode instead of interpreting

add test
add Error type for each step (Tokenizer, Parser, Compiler, Runtime)
forward reference
string interpolation

replace Scanner with Tokenizer

Check std.zing.Ast.parse and std.zig.Ast.tokenLocation

.nov source file
.novc bytecode file
.nova readable bytecode file

primitive types: bool, int, float, str
** for exponential?
handle SIG.INT
in repl mode output statement result by default

separate codegen, VM and CLI to allow embedding nov into another project and to
make it easier to implement JIT or native compilation
see [this](https://wren.io/embedding/) for embedding

move to zig master
-> replace `while (true) switch` with [labeled switch/continue](https://github.com/ziglang/zig/pull/21257)
see https://github.com/ziglang/zig/pull/21367 for tokenizer

for Value: replace pointer with raw type and use a MultiArrayList
-> need to improve globals in VM
-> idk how to handle it in codegen yet

builtin functions
see https://docs.python.org/3.12/library/functions.html
