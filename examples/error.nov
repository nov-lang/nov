let std = @import("std")
let File = std.fs.File

let openFile: (path: string) -> Result(File, File.Error) = {
    let file = File.open(path).?

    ; the .? operator does the same as
    let file = match File.open(path) {
        .ok => |f| f
        .err => |err| return err
    }

    ; we can also handle specific errors differently
    let file = match File.open(path) {
        .ok => |f| f
        .err => |err| match err.kind {
            .not_found => {
                ; do something
            },
            _ => return err
        }
    }

    return file
}

let main: () -> void = {
    let file = match openFile("file.txt") {
        .ok => |f| f
        .err => |err| @panic("Error: {err}") ; can't return error from main
    }

    ; TODO: write file to stdout
    ; std.io.println(...

    ; we could use defer instead
    file.close()
}
